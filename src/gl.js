// Generated by CoffeeScript 1.3.1
var createProgram, gl, handleTextureLoaded, initGL, loadShader, loadTexture, shaderProgram, webGLStart;

gl = null;

shaderProgram = null;

initGL = function(canvas) {
  try {
    gl = canvas.getContext("experimental-webgl");
    gl.viewportWidth = canvas.width;
    return gl.viewportHeight = canvas.height;
  } catch (e) {
    return alert("Could not init webGL");
  }
};

createProgram = function() {
  var linked;
  shaderProgram = gl.createProgram();
  gl.attachShader(shaderProgram, loadShader('shader-fs'));
  gl.attachShader(shaderProgram, loadShader('shader-vs'));
  gl.linkProgram(shaderProgram);
  linked = gl.getProgramParameter(shaderProgram, gl.LINK_STATUS);
  if (!linked) {
    alert('not linked');
  }
  shaderProgram.positionLocation = gl.getAttribLocation(shaderProgram, 'a_position');
  shaderProgram.texCoordLocation = gl.getAttribLocation(shaderProgram, 'a_texCoord');
  shaderProgram.samplerLocation = gl.getUniformLocation(shaderProgram, 'u_image');
  shaderProgram.resolutionLocation = gl.getUniformLocation(shaderProgram, 'u_resolution');
  return shaderProgram;
};

loadShader = function(id) {
  var compiled, elt, shader, shaderSource, shaderType;
  elt = document.getElementById(id);
  shaderType = elt['type'];
  shaderSource = elt.textContent;
  shader = gl.createShader(shaderType === 'x-shader/x-vertex' ? gl.VERTEX_SHADER : gl.FRAGMENT_SHADER);
  gl.shaderSource(shader, shaderSource);
  gl.compileShader(shader);
  compiled = gl.getShaderParameter(shader, gl.COMPILE_STATUS);
  if (!compiled) {
    alert('not compiled');
  }
  return shader;
};

loadTexture = function(file, callback) {
  var image, texture;
  texture = gl.createTexture();
  gl.bindTexture(gl.TEXTURE_2D, texture);
  image = new Image();
  image.src = "resources/red.png";
  return image.onload = function() {
    return callback(handleTextureLoaded(image, texture));
  };
};

handleTextureLoaded = function(image, texture) {
  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
  gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, image);
  return texture;
};

webGLStart = function() {
  var canvas;
  canvas = document.getElementById("game_canvas");
  initGL(canvas);
  gl.clearColor(0.0, 0.0, 0.0, 1.0);
  gl.enable(gl.DEPTH_TEST);
  return createProgram();
};
